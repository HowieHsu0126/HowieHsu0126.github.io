<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DARTS：Differentiable Architecture Search</title>
      <link href="/2023/06/23/DARTS/"/>
      <url>/2023/06/23/DARTS/</url>
      
        <content type="html"><![CDATA[<blockquote><p>标题</p><ul><li>DARTS: Differentiable Architecture Search</li></ul></blockquote><blockquote><p>摘要</p><ul><li>This paper addresses the scalability challenge of architecture search by formulating the task in a differentiable manner. Unlike conventional approaches of applying evolution or reinforcement learning over a discrete and non-differentiable search space, our method is based on the continuous relaxation of the architecture representation, allowing efficient search of the architecture using gradient descent. Extensive experiments on CIFAR-10, ImageNet, Penn Treebank and WikiText-2 show that our algorithm excels in discovering high-performance convolutional architectures for image classification and recurrent architectures for language modeling, while being orders of magnitude faster than state-of-the-art non-differentiable techniques. Our implementation has been made publicly available to facilitate further research on efficient architecture search algorithms.</li></ul></blockquote><hr><h1 id="2-💡Note"><a href="#2-💡Note" class="headerlink" title="2 💡Note"></a>2 💡Note</h1><h2 id="2-1-论文试图解决什么问题？"><a href="#2-1-论文试图解决什么问题？" class="headerlink" title="2.1 论文试图解决什么问题？"></a>2.1 论文试图解决什么问题？</h2><ul><li>Dominant approaches treated the architecture search as a black-box optimization problem over a discrete domain, leading to a large number of architecture evaluation required.</li><li>Efficient architecture search </li></ul><h2 id="2-2-这是否是一个新的问题？"><a href="#2-2-这是否是一个新的问题？" class="headerlink" title="2.2 这是否是一个新的问题？"></a>2.2 这是否是一个新的问题？</h2><ul><li>Numerous prior studies have explored various approaches based on reinforcement learning (RL), evolution, or Bayesian optimization.</li><li>But DARTS approaches the problem from a different angle.</li></ul><h2 id="2-3-这篇文章要验证一个什么科学假设？"><a href="#2-3-这篇文章要验证一个什么科学假设？" class="headerlink" title="2.3 这篇文章要验证一个什么科学假设？"></a>2.3 这篇文章要验证一个什么科学假设？</h2><p>Compared with previous methods, differentiable network architecture search based on bilevel optimization is <strong>efficient and transferable.</strong></p><h2 id="2-4-有哪些相关研究？如何归类？谁是这一课题在领域内值得关注的研究员？"><a href="#2-4-有哪些相关研究？如何归类？谁是这一课题在领域内值得关注的研究员？" class="headerlink" title="2.4 有哪些相关研究？如何归类？谁是这一课题在领域内值得关注的研究员？"></a>2.4 有哪些相关研究？如何归类？谁是这一课题在领域内值得关注的研究员？</h2><ol><li>non-differentiable search techniques: reinforcement learning (RL), evolution, or Bayesian optimization.<ul><li>Low efficiency</li></ul></li><li>searching architectures within a continuous domain<ul><li>Seek to fine-tune a specific aspect of an architecture, as opposed to learning high-performance architecture building blocks with complex graph topologies with a rich search space.</li></ul></li></ol><h2 id="2-5-🔴论文中提到的解决方案之关键是什么？"><a href="#2-5-🔴论文中提到的解决方案之关键是什么？" class="headerlink" title="2.5 🔴论文中提到的解决方案之关键是什么？"></a>2.5 🔴论文中提到的解决方案之关键是什么？</h2><blockquote><p>[!Note] An overview of DARTS<br><img src="https://image-hosting-service-1318887812.cos.ap-nanjing.myqcloud.com/DARTS%EF%BC%9ADifferentiable%20Architecture%20Search--20230621.png" alt="DARTS：Differentiable Architecture Search--20230621"><br>(a) Operations on the edges are initially unknown.</p><p>(b) Continuous relaxation of the search space by placing a mixture of candidate operations on each edge.</p><p>(c) Joint optimization of the mixing probabilities and the network weights by solving a bilevel optimization problem.</p><p>(d) Inducing the final architecture from the learned mixing probabilities.</p><p><img src="https://image-hosting-service-1318887812.cos.ap-nanjing.myqcloud.com/1-DARTS%EF%BC%9ADifferentiable%20Architecture%20Search--20230621.png" alt="1-DARTS：Differentiable Architecture Search--20230621"></p></blockquote><h3 id="2-5-1-Search-Space"><a href="#2-5-1-Search-Space" class="headerlink" title="2.5.1 Search Space"></a>2.5.1 Search Space</h3><blockquote><p>Searching for a computation <strong>cell</strong> as the building block of the final architecture.</p></blockquote><ol><li>A cell is a <strong>directed acyclic graph</strong> consisting of an ordered sequence of N nodes.</li><li>Each node: latent representation<ul><li>“Latent representation” refers to a representation form used in machine learning and deep learning to represent hidden features or abstract representations of data.</li></ul></li><li>Each directed edge: operation</li><li>Each intermediate node is computed based on all of its predecessors: $$x^{(j)}=\sum_{i&lt;j} o^{(i, j)}\left(x^{(i)}\right)$$</li><li>A special zero operation is also included to indicate a lack of connection between two nodes.</li><li>learning the cell $\rightarrow$ learning the operations on its edges.</li></ol><h3 id="2-5-2-Continuous-Relaxation-And-Optimization"><a href="#2-5-2-Continuous-Relaxation-And-Optimization" class="headerlink" title="2.5.2 Continuous Relaxation And Optimization"></a>2.5.2 Continuous Relaxation And Optimization</h3><ol><li><strong>Relaxation:</strong> Relax the categorical choice of a particular operation to a softmax over all possible operations: $$\bar{o}^{(i, j)}(x)=\sum_{o \in \mathcal{O}} \frac{\exp \left(\alpha_o^{(i, j)}\right)}{\sum_{o^{\prime} \in \mathcal{O}} \exp \left(\alpha_{o^{\prime}}^{(i, j)}\right)} o(x)$$<ul><li>$\alpha_(i, j)$: the operation mixing weights for a pair of nodes $(i, j)$</li><li>learning a set of continuous variables $α = {α(i, j)}$</li></ul></li><li><strong>[[Bilevel optimization]]:</strong> After relaxation, our goal is to jointly learn the architecture $\alpha$ and the weights $w$ within all the mixed operations $$\begin{array}{cl}\min <em>\alpha &amp; \mathcal{L}</em>{\text {val }}\left(w^*(\alpha), \alpha\right) \\text { s.t. } &amp; w^*(\alpha)=\operatorname{argmin}<em>w \mathcal{L}</em>{\text {train }}(w, \alpha)\end{array}$$<ul><li>optimize the validation loss, but using gradient descent.</li><li>the architecture $\alpha$ could be viewed as a special type of hyper-parameter</li></ul></li></ol><h3 id="2-5-3-Approximate-Architecture-Gradient"><a href="#2-5-3-Approximate-Architecture-Gradient" class="headerlink" title="2.5.3 Approximate Architecture Gradient"></a>2.5.3 Approximate Architecture Gradient</h3><ol><li><strong>One-step Approximation:</strong> （Also can be seen in Nesterov，MAML）Evaluating the architecture gradient exactly can be prohibitive due to the expensive inner optimization. $$\begin{aligned} &amp; \nabla_\alpha \mathcal{L}<em>{\text {val }}\left(w^*(\alpha), \alpha\right) \ \approx &amp; \nabla_\alpha \mathcal{L}</em>{\text {val }}\left(w-\xi \nabla_w \mathcal{L}_{\text {train }}(w, \alpha), \alpha\right)\end{aligned}$$</li></ol><ul><li>$\xi$ helps to converge to a better local optimum</li></ul><ol start="2"><li><strong>Chain rule</strong>: </li><li>Let:  $$\begin{align*}w^\prime=f(w, \alpha) &amp;= w - \xi\nabla_w \mathcal{L}<em>{\text{train}}(w, \alpha) \g(w, \alpha) &amp;= \mathcal{L}</em>{\text{val}}(f(w, \alpha), \alpha)\end{align*}$$</li><li>So:  $$\begin{align*}\nabla_\alpha \mathcal{L}<em>{\text{val}}\left(w-\xi \nabla_w \mathcal{L}</em>{\text{train}}(w, \alpha), \alpha\right) &amp;= \frac{\partial g}{\partial \alpha} +\frac{dg}{d\alpha}\&amp;= \frac{\partial g}{\partial f} \cdot \frac{\partial f}{\partial \alpha} + \frac{dg}{d\alpha}\&amp;= \frac{\partial \mathcal{L}<em>{\text{val}}}{\partial f} \cdot \frac{\partial}{\partial \alpha} (w - \xi \nabla_w \mathcal{L}</em>{\text{train}}(w, \alpha)) + \frac{d\mathcal{L}_\text{val}}{d\alpha}\end{align*}$$</li><li>Where: $$\frac{\partial \mathcal{L}<em>{\text{val}}}{\partial f} = \nabla_\alpha \mathcal{L}</em>{v a l}\left(w, \alpha\right)$$</li><li>And: $$\frac{\partial}{\partial \alpha} (w - \xi \nabla_w \mathcal{L}<em>{\text{train}}(w, \alpha)) = -\xi \nabla</em>{\alpha, w}^2 \mathcal{L}_{\text {train }}(w, \alpha)$$</li><li>And: $$\frac{dg}{d\alpha} = \nabla_\alpha \mathcal{L}_{v a l}\left(w^{\prime}, \alpha\right)$$</li><li>So: $$\nabla_\alpha \mathcal{L}<em>{\text {val }}\left(w-\xi \nabla_w \mathcal{L}</em>{\text {train }}(w, \alpha), \alpha\right)=\nabla_\alpha \mathcal{L}<em>{\text {val }}\left(w^{\prime}, \alpha\right)-\xi \nabla</em>{\alpha, w}^2 \mathcal{L}<em>{\text {train }}(w, \alpha) \nabla</em>{w^{\prime}} \mathcal{L}_{\text {val }}\left(w^{\prime}, \alpha\right)$$</li><li><strong>Finite difference approximation</strong>：The expression above contains an expensive matrix-vector product in its second term. $$\nabla_{\alpha, w}^2 \mathcal{L}<em>{\text {train }}(w, \alpha) \nabla</em>{w^{\prime}} \mathcal{L}<em>{\text {val }}\left(w^{\prime}, \alpha\right) \approx \frac{\nabla_\alpha \mathcal{L}</em>{\text {train }}\left(w^{+}, \alpha\right)-\nabla_\alpha \mathcal{L}_{\text {train }}\left(w^{-}, \alpha\right)}{2 \epsilon}$$</li></ol><ul><li>Central difference: $f^{\prime}(x) \approx \frac{f(x+h)-f(x-h)}{2 h}$</li><li>Taylor Formula: <ol><li>We have: $f(x)=\frac{f\left(x_0\right)}{0 !}+\frac{f^{\prime}\left(x_0\right)}{1 !}\left(x-x_0\right)+\ldots$</li><li>Then: $f\left(x_0+h\right)=f\left(x_0\right)+\frac{f^{\prime}\left(x_0\right)}{1 !} h+\ldots$</li><li>Replace $h$ with $hA$: $\begin{aligned} &amp; f\left(x_0+hA\right)=f\left(x_0\right)+\frac{f^{\prime}\left(x_0\right)}{1 !} h A+\ldots \ &amp;f\left(x_0-h A\right)=f\left(x_0\right)-\frac{f^{\prime}\left(x_0\right)}{1 !} hA+\ldots\end{aligned}$ </li><li>Subtract one equation from another: $f^{\prime}\left(x_0\right) \cdot A \approx \frac{f\left(x_0+h A\right)-f\left(x_0-h A\right)}{2 h}$</li></ol></li><li>Where: <ol><li>$f^\prime(x_0)=\nabla_{\alpha, w}^2 \mathcal{L}_{\text {train }}(w, \alpha)$</li><li>$A=\nabla_{w^{\prime}} \mathcal{L}_{\text {val }}\left(w^{\prime}, \alpha\right)$</li><li>$h=\epsilon$</li><li>$w^{ \pm}=w \pm \epsilon \nabla_{w^{\prime}} \mathcal{L}_{v a l}\left(w^{\prime}, \alpha\right)$</li></ol></li></ul><ol start="4"><li><strong>First-order Approximation:</strong>  $\xi=0$, the second-order derivative will disappear.</li></ol><h3 id="2-5-4-Deriving-Discrete-Architectures"><a href="#2-5-4-Deriving-Discrete-Architectures" class="headerlink" title="2.5.4 Deriving Discrete Architectures"></a>2.5.4 Deriving Discrete Architectures</h3><ol><li>The strength of an operation is defined as $\frac{\exp \left(\alpha_o^{(i, j)}\right)}{\sum_{o^{\prime} \in \mathcal{O}} \exp \left(\alpha_{o^{\prime}}^{(i, j)}\right)}$.</li><li><strong>Discretization:</strong> At the end of search, a discrete architecture can be obtained by replacing each mixed operation with the most likely operation $$o^{(i, j)}=\operatorname{argmax}_{o \in \mathcal{O}} \alpha_o^{(i, j)}$$</li><li>Retain the top-k strongest operations.</li></ol><h3 id="2-5-5-Complexity-Analysis"><a href="#2-5-5-Complexity-Analysis" class="headerlink" title="2.5.5 Complexity Analysis"></a>2.5.5 Complexity Analysis</h3><h2 id="2-6-论文中的实验是如何设计的？"><a href="#2-6-论文中的实验是如何设计的？" class="headerlink" title="2.6 论文中的实验是如何设计的？"></a>2.6 论文中的实验是如何设计的？</h2><h3 id="2-6-1-Architecture-Search"><a href="#2-6-1-Architecture-Search" class="headerlink" title="2.6.1 Architecture Search"></a>2.6.1 Architecture Search</h3><blockquote><p>Search for the cell architectures using DARTS, and determine the best cells based on their validation performance <img src="https://image-hosting-service-1318887812.cos.ap-nanjing.myqcloud.com/3-DARTS%EF%BC%9ADifferentiable%20Architecture%20Search--20230621.png" alt="3-DARTS：Differentiable Architecture Search--20230621"></p></blockquote><ul><li>operations sets：<ol><li>Convolutional Cells（Order: $ReLU-Conv-BN$; N = 7 nodes）: <ol><li>3 × 3 and 5 × 5 separable convolutions </li><li>3 × 3 and 5 × 5 dilated separable convolutions </li><li>3 × 3 max pooling</li><li>3 × 3 average pooling</li><li>identity </li><li>zero</li></ol></li><li>Recurrent Cells（N = 12 nodes）:<ol><li>linear transformations <ol><li>tanh </li><li>relu </li><li>sigmoid </li></ol></li><li>identity</li><li>zero</li></ol></li></ol></li></ul><h3 id="2-6-2-Architecture-Evaluation"><a href="#2-6-2-Architecture-Evaluation" class="headerlink" title="2.6.2 Architecture Evaluation"></a>2.6.2 Architecture Evaluation</h3><blockquote><p>Use these cells to construct larger architectures, which we train from scratch and report their performance on the test set.</p></blockquote><ul><li>To evaluate the selected architecture, randomly initialize its weights (weights learned during the search process are discarded), train it from scratch, and report its performance on the test set.</li></ul><h3 id="2-6-3-Parameter-Analysis"><a href="#2-6-3-Parameter-Analysis" class="headerlink" title="2.6.3 Parameter Analysis"></a>2.6.3 Parameter Analysis</h3><h4 id="2-6-3-1-Alternative-Optimization-Strategies"><a href="#2-6-3-1-Alternative-Optimization-Strategies" class="headerlink" title="2.6.3.1 Alternative Optimization Strategies"></a>2.6.3.1 Alternative Optimization Strategies</h4><ol><li>$\alpha$ and $w$ are jointly optimized over the union of the training and validation sets using <strong>coordinate descent</strong><ul><li>Even worse than random search </li></ul></li><li>optimize $\alpha$ simultaneously with $w$ (without alteration) using <strong>SGD</strong><ul><li>Worse than DARTS</li></ul></li></ol><h4 id="2-6-3-2-Search-with-Increased-Depth"><a href="#2-6-3-2-Search-with-Increased-Depth" class="headerlink" title="2.6.3.2 Search with Increased Depth"></a>2.6.3.2 Search with Increased Depth</h4><ol><li>The enlarged discrepancy of the number of channels between architecture search and final evaluation.</li><li>Searching with a deeper model might require different hyper-parameters due to the increased number of layers to back-prop through</li></ol><h2 id="2-7-论文中的实验及结果有没有很好地支持需要验证的科学假设？"><a href="#2-7-论文中的实验及结果有没有很好地支持需要验证的科学假设？" class="headerlink" title="2.7 论文中的实验及结果有没有很好地支持需要验证的科学假设？"></a>2.7 论文中的实验及结果有没有很好地支持需要验证的科学假设？</h2><ol><li>Result #1 ：<img src="https://image-hosting-service-1318887812.cos.ap-nanjing.myqcloud.com/2-DARTS%EF%BC%9ADifferentiable%20Architecture%20Search--20230621.png" alt="2-DARTS：Differentiable Architecture Search--20230621"></li><li>Result #2 :<ol><li>CIFAR-10  <img src="https://image-hosting-service-1318887812.cos.ap-nanjing.myqcloud.com/4-DARTS%EF%BC%9ADifferentiable%20Architecture%20Search--20230621.png" alt="4-DARTS：Differentiable Architecture Search--20230621"></li><li>PTB <img src="https://image-hosting-service-1318887812.cos.ap-nanjing.myqcloud.com/5-DARTS%EF%BC%9ADifferentiable%20Architecture%20Search--20230621.png" alt="5-DARTS：Differentiable Architecture Search--20230621"></li></ol></li><li>Result #3 :Transferability<ol><li>CIFAR-10 -&gt; ImageNet  <img src="https://image-hosting-service-1318887812.cos.ap-nanjing.myqcloud.com/6-DARTS%EF%BC%9ADifferentiable%20Architecture%20Search--20230621.png" alt="6-DARTS：Differentiable Architecture Search--20230621"></li><li>PTB -&gt; WT2<img src="https://image-hosting-service-1318887812.cos.ap-nanjing.myqcloud.com/7-DARTS%EF%BC%9ADifferentiable%20Architecture%20Search--20230621.png" alt="7-DARTS：Differentiable Architecture Search--20230621"></li></ol></li></ol><h2 id="2-8-这篇论文到底有什么贡献？"><a href="#2-8-这篇论文到底有什么贡献？" class="headerlink" title="2.8 这篇论文到底有什么贡献？"></a>2.8 这篇论文到底有什么贡献？</h2><ol><li>A novel algorithm for differentiable network architecture search based on bilevel optimization.</li><li>Extensive experiments showing that gradient-based architecture search achieves highly competitive results and remarkable efficiency improvement.</li><li>Transferable architectures learned by DARTS.</li></ol><h2 id="2-9-下一步呢？有什么工作可以继续深入？"><a href="#2-9-下一步呢？有什么工作可以继续深入？" class="headerlink" title="2.9 下一步呢？有什么工作可以继续深入？"></a>2.9 下一步呢？有什么工作可以继续深入？</h2><ol><li>Differentiable architecture search on Graph neural networks.</li><li>Parallel DARTS</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 论文阅读, 经典论文, 神经架构搜索 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
